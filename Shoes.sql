-- CREATE DATABASE Shoes;
-- GO
-- USE [Shoes];
-- GO

-- BẢNG BRAND --
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[BRAND]
(
	[ID] [int] IDENTITY(1,1),
	[NAME] [nvarchar](255),
	[DESCRIPTION] [nvarchar](255),
	PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO

-- BẢNG CATEGORY --
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CATEGORY]
(
	[ID] [int] IDENTITY(1,1),
	[NAME] [nvarchar](255),
	[DESCRIPTION] [nvarchar](255),
	PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO


-- BẢNG SOLE --
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[SOLE]
(
	[ID] [int] IDENTITY(1,1),
	[NAME] [nvarchar](255),
	[DESCRIPTION] [nvarchar](255),
	PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO

-- BẢNG COLLAR --
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[COLLAR]
(
	[ID] [int] IDENTITY(1,1),
	[NAME] [nvarchar](255),
	[DESCRIPTION] [nvarchar](255),
	PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO

-- BẢNG SIZE --
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[SIZE]
(
	[ID] [int] IDENTITY(1,1),
	[EU] [varchar](10),
	[DESCRIPTION] [varchar](255),
	PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO

-- BẢNG COLOR --
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[COLOR]
(
	[ID] [int] IDENTITY(1,1),
	[NAME] [nvarchar](255),
	[DESCRIPTION] [nvarchar](255),
	[CODE] [nvarchar](10),
	PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO

-- BẢNG IMAGE --
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[IMAGE]
(
	[ID] [int] IDENTITY(1,1),
	[PRODUCT_DETAIL_ID] [int],
	[URL] [nvarchar](max),
	[IS_MAIN] [bit] DEFAULT 0
		PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO

-- BẢNG PAYMENT_METHOD --
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[PAYMENT_METHOD]
(
	[ID] [int] IDENTITY(1,1),
	[NAME] [nvarchar](255),
	[DESCRIPTION] [nvarchar](255),
	[CREATED_DATE] [DATETIME] DEFAULT GETDATE(),
	[MODIFIED_DATE] [DATETIME]
		PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO

-- BẢNG CART --
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CART]
(
	[ID] [int] IDENTITY(1,1),
	[CUSTOMER_ID] [int],
	PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO

-- BẢNG CART_DETAIL --
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CART_DETAIL]
(
	[ID] [int] IDENTITY(1,1),
	[CART_ID] [int],
	[PRODUCT_DETAIL_ID] [int],
	[QUANTITY] [int],
	[MODIFIED_DATE] [DATETIME] DEFAULT GETDATE()
		PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO

-- BẢNG ADDRESS --
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ADDRESS]
(
	[ID] INT IDENTITY(1,1),
	[FULL_ADDRESS] NVARCHAR(500),
	[NUMBER_PHONE] NVARCHAR(45),
	[FULL_NAME] NVARCHAR(45),
	[CUSTOMER_ID] INT,
	[IS_DEFAULT] BIT,
	[DETAIL_ADDRESS] NVARCHAR(150),
	[WARD_NAME] NVARCHAR(150),
	[DISTRICT_NAME] NVARCHAR(150),
	[CITY_NAME] NVARCHAR(150)
		PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO

-- BẢNG BILL --
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[BILL]
(
	[ID] [int] IDENTITY(1,1),
	[CUSTOMER_ID] [int],
	[EMPLOYEE_ID] [int],
	[PTTT_ID] [int],
	[PROMOTION_ID] [int],
	[CODE] [nvarchar](45),
	[BILL_TYPE] [nvarchar](45),
	[STATUS] [int],
	[CREATED_BY] [nvarchar](45),
	[CREATED_DATE] [date],
	[SHIPPING_DATE] [date],
	[DATE_OF_PAYMENT] [date],
	[RECIPIENT_NAME] [nvarchar](45),
	[RECIPIENT_PHONE_NUMBER] [nvarchar](45),
	[RECEIVER_ADDRESS] [nvarchar](255),
	[ADDRESS_METHOD] [nvarchar](50),
	[ESTIMATED_DELIVERY_DATE] [date],
	[MODIFIED_BY] [nvarchar](100),
	[MODIFIED_DATE] [date],
	[NOTE] [text],
	[STATUS_PAYMENT] [nvarchar](100),
	-- Tiền hàng
	[SUB_TOTAL] [decimal](18, 2),
	-- Tiền giảm giá
	[DISCOUNT_AMOUNT] [decimal](18, 2),
	-- Phí ship
	[SHIPPING_FEE] [decimal](18, 2),
	-- Tổng cuối
	[GRAND_TOTAL] [decimal](18, 2),
	PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO

-- BẢNG BILL_DETAIL --
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[BILL_DETAIL]
(
	[ID] [int] IDENTITY(1,1),
	[BILL_ID] [int],
	[PRODUCT_DETAIL_ID] [int],
	[QUANTITY] [int],
	[PRICE] [decimal](18, 2),
	[STATUS] [int],
	[PRODUCT_IMAGE] [nvarchar](200),
	[COLOR] [nvarchar](50),
	[SIZE] [nvarchar](50),
	[PRODUCT_NAME] [nvarchar](200),
	PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO

-- BẢNG CUSTOMER --
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CUSTOMER]
(
	[ID] [int] IDENTITY(1,1),
	[ACCOUNT_ID] [int] null,
	[FULL_NAME] [nvarchar](255),
	[GENDER] [nvarchar](45),
	[EMAIL] [nvarchar](255),
	[NUMBER_PHONE] [nvarchar](45),
	[BIRTH_OF_DATE] [date],
	[STATUS] [int],
	[CREATED_DATE] [datetime],
	PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO

-- BẢNG EMPLOYEE --
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[EMPLOYEE]
(
	[ID] [int] IDENTITY(1,1),
	[ACCOUNT_ID] [int],
	[FULL_NAME] [nvarchar](255),
	[GENDER] [nvarchar](45),
	[EMAIL] [nvarchar](255),
	[NUMBER_PHONE] [nvarchar](45),
	[BIRTH_OF_DATE] [date],
	[IS_ACTIVE] [bit],
	[CREATED_BY] [nvarchar](45),
	[CREATED_DATE] [datetime],
	PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO

-- BẢNG ACCOUNT --
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ACCOUNT]
(
	[ID] [int] IDENTITY(1,1),
	[USERNAME] [nvarchar](255) UNIQUE,
	[PASSWORD] [nvarchar](255),
	[CREATED_DATE] [datetime],
	[IS_ACTIVE] [bit],
	[ROLE_ID] [int],
	PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO

-- BẢNG ROLE --
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ROLE]
(
	[ID] [int] IDENTITY(1,1),
	[ROLE_NAME] [nvarchar](50),
	[DESCRIPTION] [nvarchar](255),
	PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO

-- BẢNG PROMOTION
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[PROMOTION]
(
	[ID] [INT] IDENTITY(1,1),
	[PROMOTION_CODE] [VARCHAR](50),
	[NAME] [NVARCHAR](255),
	[TYPE] [INT],
	-- 1: %, 2: Fixed amount
	[VALUE] [DECIMAL](10, 2),
	[START_DATE] [DATETIME],
	[END_DATE] [DATETIME],
	[STATUS] [INT],
	-- 0: Inactive, 1: Active
	[NOTE] [NVARCHAR](MAX),
	[CREATED_DATE] [DATETIME],
	[MODIFIED_DATE] [DATETIME],
	PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO

--BẢNG INVENTORY --
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[INVENTORY]
(
	[ID] [INT] IDENTITY(1,1),
	[PRODUCT_DETAIL_ID] [INT],
	[QUANTITY] [INT],
	[MODIFIED_DATE] [DATETIME],
	PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO

--BẢNG IMPORT_RECEIPT --
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[IMPORT_RECEIPT]
(
	[ID] [INT] IDENTITY(1,1),
	[IMPORT_RECEIPT_CODE] [VARCHAR](50),
	[EMPLOYEE_ID] [INT],
	[IMPORT_DATE] [DATETIME],
	[TOTAL_AMOUNT] [DECIMAL](18, 2),
	[NOTE] [NVARCHAR](MAX),
	[STATUS] [INT],
	[CREATED_DATE] [DATETIME] DEFAULT GETDATE(),
	PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO

--BẢNG IMPORT_RECEIPT_DETAIL --
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[IMPORT_RECEIPT_DETAIL]
(
	[ID] [INT] IDENTITY(1,1),
	[IMPORT_RECEIPT_ID] [INT],
	[PRODUCT_DETAIL_ID] [INT],
	[QUANTITY] [INT],
	[UNIT_PRICE] [DECIMAL](18,2),
	[TOTAL_PRICE] [DECIMAL](18,2),
	[STATUS] [INT],
	PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO

-- BẢNG PRODUCT --
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[PRODUCT]
(
	[ID] [int] IDENTITY(1,1),
	[PRODUCT_NAME] [nvarchar](255),
	[BRAND_ID] [int],
	[CATEGORY_ID] [int],
	[SOLE_ID] [int],
	[DESCRIPTION] [nvarchar](max),
	[CREATED_BY] [nvarchar](255),
	[CREATED_DATE] [datetime],
	[STATUS] [int],
	PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO

-- BẢNG PRODUCT_DETAIL --
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[PRODUCT_DETAIL]
(
	[ID] [int] IDENTITY(1,1),
	[COLLAR_ID] [int],
	[SIZE_ID] [int],
	[COLOR_ID] [int],
	[PRODUCT_ID] [int],
	[PRICE] [decimal](18, 2),
	[DESCRIPTION] [nvarchar](max),
	[STATUS] [int],
	PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
-- BẢNG FAVORITE --
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[FAVORITE]
(
	[ID] [int] IDENTITY(1,1),
	[CUSTOMER_ID] [int],
	[PRODUCT_ID] [int],
	[CREATE_AT] [DATETIME] DEFAULT GETDATE(),
	PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO

ALTER TABLE [dbo].[ADDRESS] WITH CHECK ADD CONSTRAINT [FK_ADDRESS_CUSTOMER] FOREIGN KEY([CUSTOMER_ID])
REFERENCES [dbo].[CUSTOMER] ([ID])
GO
ALTER TABLE [dbo].[ADDRESS] CHECK CONSTRAINT [FK_ADDRESS_CUSTOMER]
GO

ALTER TABLE [dbo].[BILL] WITH CHECK ADD CONSTRAINT [FK_BILL_CUSTOMER] FOREIGN KEY([CUSTOMER_ID])
REFERENCES [dbo].[CUSTOMER] ([ID])
GO
ALTER TABLE [dbo].[BILL] CHECK CONSTRAINT [FK_BILL_CUSTOMER]
GO

ALTER TABLE [dbo].[BILL] WITH CHECK ADD CONSTRAINT [FK_BILL_EMPLOYEE] FOREIGN KEY([EMPLOYEE_ID])
REFERENCES [dbo].[EMPLOYEE] ([ID])
GO
ALTER TABLE [dbo].[BILL] CHECK CONSTRAINT [FK_BILL_EMPLOYEE]
GO

ALTER TABLE [dbo].[BILL] WITH CHECK ADD CONSTRAINT [FK_BILL_PAYMENTMETHOD] FOREIGN KEY([PTTT_ID])
REFERENCES [dbo].[PAYMENT_METHOD] ([ID])
GO
ALTER TABLE [dbo].[BILL] CHECK CONSTRAINT [FK_BILL_PAYMENTMETHOD]
GO

ALTER TABLE [dbo].[BILL] WITH CHECK ADD CONSTRAINT [FK_BILL_PROMOTION] FOREIGN KEY([PROMOTION_ID])
REFERENCES [dbo].[PROMOTION] ([ID])
GO
ALTER TABLE [dbo].[BILL] CHECK CONSTRAINT [FK_BILL_PROMOTION]
GO

ALTER TABLE [dbo].[BILL_DETAIL] WITH CHECK ADD CONSTRAINT [FK_BILLDETAIL_BILL] FOREIGN KEY([BILL_ID])
REFERENCES [dbo].[BILL] ([ID])
GO
ALTER TABLE [dbo].[BILL_DETAIL] CHECK CONSTRAINT [FK_BILLDETAIL_BILL]
GO

ALTER TABLE [dbo].[BILL_DETAIL] WITH CHECK ADD CONSTRAINT [FK_BILLDETAIL_PRODUCTDETAIL] FOREIGN KEY([PRODUCT_DETAIL_ID])
REFERENCES [dbo].[PRODUCT_DETAIL] ([ID])
GO
ALTER TABLE [dbo].[BILL_DETAIL] CHECK CONSTRAINT [FK_BILLDETAIL_PRODUCTDETAIL]
GO

ALTER TABLE [dbo].[CART] WITH CHECK ADD CONSTRAINT [FK_CART_CUSTOMER] FOREIGN KEY([CUSTOMER_ID])
REFERENCES [dbo].[CUSTOMER] ([ID])
GO
ALTER TABLE [dbo].[CART] CHECK CONSTRAINT [FK_CART_CUSTOMER]
GO

ALTER TABLE [dbo].[CART_DETAIL] WITH CHECK ADD CONSTRAINT [FK_CART_ID] FOREIGN KEY([CART_ID])
REFERENCES [dbo].[CART] ([ID])
GO
ALTER TABLE [dbo].[CART_DETAIL] CHECK CONSTRAINT [FK_CART_ID]
GO

ALTER TABLE [dbo].[CART_DETAIL] WITH CHECK ADD CONSTRAINT [FK_PRODUCT_DETAIL_ID] FOREIGN KEY([PRODUCT_DETAIL_ID])
REFERENCES [dbo].[PRODUCT_DETAIL] ([ID])
GO
ALTER TABLE [dbo].[CART_DETAIL] CHECK CONSTRAINT [FK_PRODUCT_DETAIL_ID]
GO

ALTER TABLE [dbo].[IMAGE] WITH CHECK ADD CONSTRAINT [FK_IMAGE_PRODUCT_DETAIL] FOREIGN KEY([PRODUCT_DETAIL_ID])
REFERENCES [dbo].[PRODUCT_DETAIL] ([ID])
GO
ALTER TABLE [dbo].[IMAGE] CHECK CONSTRAINT [FK_IMAGE_PRODUCT_DETAIL]
GO

ALTER TABLE [dbo].[PRODUCT] WITH CHECK ADD CONSTRAINT [FK_PRODUCT_BRAND] FOREIGN KEY([BRAND_ID])
REFERENCES [dbo].[BRAND] ([ID])
GO
ALTER TABLE [dbo].[PRODUCT] CHECK CONSTRAINT [FK_PRODUCT_BRAND]
GO

ALTER TABLE [dbo].[PRODUCT] WITH CHECK ADD CONSTRAINT [FK_PRODUCT_CATEGORY] FOREIGN KEY([CATEGORY_ID])
REFERENCES [dbo].[CATEGORY] ([ID])
GO
ALTER TABLE [dbo].[PRODUCT] CHECK CONSTRAINT [FK_PRODUCT_CATEGORY]
GO

ALTER TABLE [dbo].[PRODUCT] WITH CHECK ADD CONSTRAINT [FK_PRODUCT_SOLE] FOREIGN KEY([SOLE_ID])
REFERENCES [dbo].[SOLE] ([ID])
GO
ALTER TABLE [dbo].[PRODUCT] CHECK CONSTRAINT [FK_PRODUCT_SOLE]
GO

ALTER TABLE [dbo].[PRODUCT_DETAIL] WITH CHECK ADD CONSTRAINT [FK_PRODUCTDETAIL_COLLAR] FOREIGN KEY([COLLAR_ID])
REFERENCES [dbo].[COLLAR] ([ID])
GO
ALTER TABLE [dbo].[PRODUCT_DETAIL] CHECK CONSTRAINT [FK_PRODUCTDETAIL_COLLAR]
GO

ALTER TABLE [dbo].[PRODUCT_DETAIL] WITH CHECK ADD CONSTRAINT [FK_PRODUCTDETAIL_SIZE] FOREIGN KEY([SIZE_ID])
REFERENCES [dbo].[SIZE] ([ID])
GO
ALTER TABLE [dbo].[PRODUCT_DETAIL] CHECK CONSTRAINT [FK_PRODUCTDETAIL_SIZE]
GO

ALTER TABLE [dbo].[PRODUCT_DETAIL] WITH CHECK ADD CONSTRAINT [FK_PRODUCTDETAIL_COLOR] FOREIGN KEY([COLOR_ID])
REFERENCES [dbo].[COLOR] ([ID])
GO
ALTER TABLE [dbo].[PRODUCT_DETAIL] CHECK CONSTRAINT [FK_PRODUCTDETAIL_COLOR]
GO

ALTER TABLE [dbo].[PRODUCT_DETAIL] WITH CHECK ADD CONSTRAINT [FK_PRODUCTDETAIL_PRODUCT] FOREIGN KEY([PRODUCT_ID])
REFERENCES [dbo].[PRODUCT] ([ID])
GO
ALTER TABLE [dbo].[PRODUCT_DETAIL] CHECK CONSTRAINT [FK_PRODUCTDETAIL_PRODUCT]
GO

ALTER TABLE [dbo].[IMPORT_RECEIPT] WITH CHECK ADD CONSTRAINT [FK_IMPORT_RECEIPT_EMPLOYEE] FOREIGN KEY([EMPLOYEE_ID])
REFERENCES [dbo].[EMPLOYEE] ([ID])
GO
ALTER TABLE [dbo].[IMPORT_RECEIPT] CHECK CONSTRAINT [FK_IMPORT_RECEIPT_EMPLOYEE]
GO

ALTER TABLE [dbo].[IMPORT_RECEIPT_DETAIL] WITH CHECK ADD CONSTRAINT [FK_RECEIPT_DETAIL_RECEIPT] FOREIGN KEY([IMPORT_RECEIPT_ID])
REFERENCES [dbo].[IMPORT_RECEIPT] ([ID])
GO
ALTER TABLE [dbo].[IMPORT_RECEIPT_DETAIL] CHECK CONSTRAINT [FK_RECEIPT_DETAIL_RECEIPT]
GO

ALTER TABLE [dbo].[IMPORT_RECEIPT_DETAIL] WITH CHECK ADD CONSTRAINT [FK_RECEIPT_DETAIL_PRODUCT] FOREIGN KEY([PRODUCT_DETAIL_ID])
REFERENCES [dbo].[PRODUCT_DETAIL] ([ID])
GO
ALTER TABLE [dbo].[IMPORT_RECEIPT_DETAIL] CHECK CONSTRAINT [FK_RECEIPT_DETAIL_PRODUCT]
GO

ALTER TABLE [dbo].[INVENTORY] WITH CHECK ADD CONSTRAINT [FK_INVENTORY_PRODUCT_DETAIL] FOREIGN KEY([PRODUCT_DETAIL_ID])
REFERENCES [dbo].[PRODUCT_DETAIL] ([ID])
GO
ALTER TABLE [dbo].[INVENTORY] CHECK CONSTRAINT [FK_INVENTORY_PRODUCT_DETAIL]
GO

ALTER TABLE [dbo].[EMPLOYEE] WITH CHECK ADD CONSTRAINT [FK_EMPLOYEE_ACCOUNT_ID] FOREIGN KEY([ACCOUNT_ID])
REFERENCES [dbo].[ACCOUNT] ([ID])
GO
ALTER TABLE [dbo].[EMPLOYEE] CHECK CONSTRAINT [FK_EMPLOYEE_ACCOUNT_ID]
GO

ALTER TABLE [dbo].[CUSTOMER] WITH CHECK ADD CONSTRAINT [FK_CUSTOMER_ACCOUNT_ID] FOREIGN KEY([ACCOUNT_ID])
REFERENCES [dbo].[ACCOUNT] ([ID])
GO
ALTER TABLE [dbo].[CUSTOMER] CHECK CONSTRAINT [FK_CUSTOMER_ACCOUNT_ID]
GO

ALTER TABLE [dbo].[ACCOUNT] WITH CHECK ADD CONSTRAINT [FK_ACCOUNT_ROLE] FOREIGN KEY([ROLE_ID])
REFERENCES [dbo].[ROLE] ([ID])
GO
ALTER TABLE [dbo].[ACCOUNT] CHECK CONSTRAINT [FK_ACCOUNT_ROLE]
GO

ALTER TABLE [dbo].[FAVORITE] WITH CHECK ADD CONSTRAINT [FK_FAVORITE_CUSTOMER] FOREIGN KEY([CUSTOMER_ID])
REFERENCES [dbo].[CUSTOMER] ([ID])
GO
ALTER TABLE [dbo].[FAVORITE] CHECK CONSTRAINT [FK_FAVORITE_CUSTOMER]
GO

ALTER TABLE [dbo].[FAVORITE] WITH CHECK ADD CONSTRAINT [FK_FAVORITE_PRODUCT] FOREIGN KEY([PRODUCT_ID])
REFERENCES [dbo].[PRODUCT] ([ID])
GO
ALTER TABLE [dbo].[FAVORITE] CHECK CONSTRAINT [FK_FAVORITE_PRODUCT]
GO

ALTER TABLE [dbo].[FAVORITE] WITH CHECK ADD CONSTRAINT [UQ_FAVORITE_CUSTOMER_PRODUCT ] UNIQUE ([CUSTOMER_ID], [PRODUCT_ID])
GO

--- INSERT DATA ---

-- 0. Bảng ROLE & ACCOUNT --

INSERT INTO [dbo].[ROLE]
	([ROLE_NAME], [DESCRIPTION])
VALUES
	(N'Admin', N'Quản trị hệ thống'),
	(N'Khách hàng', N'Người mua hàng'),
	(N'Nhân viên', N'Nhân viên bán hàng');
GO

INSERT INTO [dbo].[ACCOUNT]
	([USERNAME], [PASSWORD], [CREATED_DATE], [IS_ACTIVE], [ROLE_ID])
VALUES
	(N'admin', N'123456', GETDATE(), 1, 1),
	(N'customer', N'abcdef', GETDATE(), 1, 2),
	(N'staff', N'qwerty', GETDATE(), 1, 3);
GO

-- 1. Bảng BRAND --

INSERT INTO BRAND
	(NAME, DESCRIPTION)
VALUES
	(N'Nike', N'Thiết kế thể thao và đổi mới công nghệ'),
	(N'Adidas', N'Thương hiệu thể thao nổi bật toàn cầu'),
	(N'Puma', N'Sự kết hợp giữa thời trang và thể thao'),
	(N'Converse', N'Cổ điển, cá tính, phong cách đường phố'),
	(N'New Balance', N'Tập trung vào hiệu năng và thoải mái'),
	(N'Vans', N'Thời trang trẻ trung, trượt ván và casual'),
	(N'Reebok', N'Thể thao hiện đại, mang tính sáng tạo'),
	(N'Asics', N'Chạy bộ, độ bền cao'),
	(N'Skechers', N'Thân thiện bàn chân, cực kỳ êm'),
	(N'Under Armour', N'Thương hiệu công nghệ và thể thao');
GO

-- 2. Bảng CATEGORY --

INSERT INTO CATEGORY
	(NAME, DESCRIPTION)
VALUES
	(N'Running', N'Giày chạy bộ, nhẹ, thoáng khí'),
	(N'Training', N'Giày thể thao tổng hợp cho tập gym'),
	(N'Casual', N'Diện hàng ngày, phối đồ linh hoạt'),
	(N'Basketball', N'Giày chơi bóng rổ, ôm cổ chân'),
	(N'Skateboarding', N'Giày trượt ván, đế dày, bám tốt'),
	(N'Walking', N'Giày đi bộ nhẹ và thoải mái'),
	(N'Limited Edition', N'Bản phát hành giới hạn, độc lạ'),
	(N'Fashion', N'Giày thời trang, theo trend'),
	(N'Tennis', N'Dành cho môn quần vợt'),
	(N'Lifestyle', N'Giày mang hàng ngày, tập trung style');
GO

-- 3. Bảng SOLE  --

INSERT INTO SOLE
	(NAME, DESCRIPTION)
VALUES
	(N'Foam', N'Nhẹ, êm, chống sốc khi vận động'),
	(N'Rubber', N'Bền, độ bám tốt trên nhiều bề mặt'),
	(N'EVA', N'Đế xốp đàn hồi cao, nhẹ nhàng'),
	(N'Boost', N'Công nghệ đệm Adidas, siêu đàn hồi'),
	(N'Air', N'Công nghệ đệm khí Nike nổi tiếng'),
	(N'Zoom', N'Công nghệ phản hồi nhanh, đàn hồi tốt'),
	(N'React', N'Êm, bền, nhẹ của Nike'),
	(N'Gel', N'Công nghệ giảm chấn của Asics'),
	(N'Gum Sole', N'Đế màu vàng cổ điển, độ bám tốt'),
	(N'HydroGrip', N'Đế đặc biệt chống trượt nước');
GO

-- 4. Bảng COLLAR  -- 

INSERT INTO COLLAR
	(NAME, DESCRIPTION)
VALUES
	(N'Cổ thấp', N'Thiết kế linh hoạt, dễ đi lại'),
	(N'Cổ trung', N'Cổ vừa, phù hợp cả vận động và thời trang'),
	(N'Cổ cao', N'Bảo vệ cổ chân tốt, thường dùng cho thể thao'),
	(N'Cổ tất', N'Co giãn ôm cổ chân, dễ xỏ ra vào'),
	(N'Cổ chun', N'Thiết kế có chun, tiện lợi và ôm chân'),
	(N'Cổ dây rút', N'Cổ có dây siết chặt, cố định tốt'),
	(N'Không cổ', N'Giày slip-on không có phần cổ rõ ràng'),
	(N'Cổ dạng sock', N'Thiết kế kiểu tất liền thân giày'),
	(N'Cổ bít', N'Cổ cứng, bao trọn cổ chân'),
	(N'Cổ mở rộng', N'Cho người chân to hoặc đi tất dày');
GO

-- 5. Bảng SIZE (size 33–45) -- 
INSERT INTO SIZE
	(EU, DESCRIPTION)
VALUES
	('35', N'Phù hợp chân rất nhỏ, nữ hoặc trẻ em'),
	('36', N'Nữ chân nhỏ hoặc Unisex'),
	('36.5', N'Nữ phổ biến hoặc Unisex'),
	('37', N'Nữ phổ biến'),
	('37.5', N'Nữ/Unisex thường gặp'),
	('38', N'Unisex trung bình'),
	('38.5', N'Nam chân nhỏ, Unisex'),
	('39', N'Nam/Nữ phổ biến, Unisex'),
	('40', N'Nam chân vừa'),
	('40.5', N'Nam trung bình'),
	('41', N'Nam trung bình'),
	('42', N'Nam phổ biến nhất'),
	('42.5', N'Nam chân to'),
	('43', N'Nam phổ biến tại Việt Nam'),
	('44', N'Nam ngoại cỡ nhẹ'),
	('44.5', N'Nam to, thể thao'),
	('45', N'Nam to, hàng US size'),
	('46', N'Nam rất to, ngoại cỡ'),
	('47', N'Dành cho người chân ngoại cỡ'),
	('48', N'Rất hiếm, đặt riêng');
GO

-- 6. Bảng COLOR (12 màu) --

INSERT INTO dbo.COLOR
	(NAME, DESCRIPTION, CODE)
VALUES
	(N'White', N'Trắng', N'#FFFFFF'),
	(N'Black', N'Đen', N'#000000'),
	(N'Red', N'Đỏ', N'#FF0000'),
	(N'Blue', N'Xanh dương', N'#0000FF'),
	(N'Green', N'Xanh lá', N'#00FF00'),
	(N'Yellow', N'Vàng', N'#FFFF00'),
	(N'Pink', N'Hồng', N'#FFC0CB'),
	(N'Orange', N'Cam', N'#FFA500'),
	(N'Purple', N'Tím', N'#800080'),
	(N'Grey', N'Xám', N'#808080'),
	(N'Brown', N'Nâu', N'#A52A2A'),
	(N'Navy', N'Xanh đậm', N'#000080');
GO


-- 7. Bảng PAYMENT_METHOD -- 

INSERT INTO dbo.PAYMENT_METHOD
	(NAME, DESCRIPTION)
VALUES
	(N'Cash', N'Thanh toán tiền mặt'),
	(N'ZaloPay', N'Thanh toán qua Zalo Pay'),
	(N'Momo', N'Thanh toán qua Momo'),
	(N'VNPay', N'Thanh toán qua ngân hàng');
GO

-- 8. Bảng EMPLOYEE (5 nhân viên) -- 

INSERT INTO dbo.EMPLOYEE
	(ACCOUNT_ID, FULL_NAME, GENDER, EMAIL, NUMBER_PHONE, BIRTH_OF_DATE, IS_ACTIVE, CREATED_BY, CREATED_DATE)
VALUES
	(3, N'Nguyễn Văn A', 1, 'nguyenvana@example.com', '0912345678', '1995-05-15', 1, 'admin', GETDATE()),
	(1, N'Nguyễn Văn Admin', 1, 'nguyenvanadmin@example.com', '0912345678', '2000-05-15', 1, 'admin', GETDATE());
GO

-- 9. Bảng CUSTOMER (5 khách hàng) --

INSERT INTO dbo.CUSTOMER
	(ACCOUNT_ID, FULL_NAME, GENDER, EMAIL, NUMBER_PHONE, BIRTH_OF_DATE, STATUS, CREATED_DATE)
VALUES
	(2, N'Trần Thị B', 0, 'tranthib@example.com', '0987654321', '1998-09-20', 1, GETDATE());
GO

INSERT INTO dbo.CUSTOMER
	(ACCOUNT_ID, FULL_NAME, GENDER, EMAIL, NUMBER_PHONE, BIRTH_OF_DATE, STATUS, CREATED_DATE)
VALUES
	(2, N'Đào Gia Huy', 1, 'dhuy12112002@gmail.com', '0912618528', '2002-11-12', 1, GETDATE());
GO
-- 10. Bảng PRODUCT (30 sản phẩm) --

INSERT INTO dbo.PRODUCT
	(PRODUCT_NAME, BRAND_ID, CATEGORY_ID, SOLE_ID, DESCRIPTION, CREATED_BY, CREATED_DATE, STATUS)
VALUES
	-- Nike
	(N'Nike Air Max 90', 1, 3, 1, N'Mẫu giày chạy bộ cổ điển với đệm khí Air nổi bật', N'admin01', GETDATE(), 1),
	(N'Nike Air Force 1', 1, 4, 2, N'Mẫu giày bóng rổ biểu tượng, phong cách thời trang', N'admin01', GETDATE(), 1),
	(N'Nike React Infinity Run', 1, 3, 3, N'Giày chạy bộ với đệm React, êm ái và ổn định', N'admin01', GETDATE(), 1),
	(N'Nike ZoomX Vaporfly', 1, 3, 1, N'Giày chạy chuyên nghiệp cho vận động viên marathon', N'admin01', GETDATE(), 1),
	(N'Nike Blazer Mid', 1, 4, 2, N'Giày mid-top mang phong cách retro bóng rổ cổ điển', N'admin01', GETDATE(), 1),
	(N'Nike Huarache', 1, 5, 3, N'Giày thời trang mang lại sự thoải mái, cá tính', N'admin01', GETDATE(), 1),

	-- Adidas
	(N'Adidas Ultraboost 22', 2, 3, 3, N'Giày chạy bộ với đệm Boost êm ái, phản hồi tốt', N'admin01', GETDATE(), 1),
	(N'Adidas Superstar', 2, 4, 1, N'Mẫu giày kinh điển với thiết kế mũi sò đặc trưng', N'admin01', GETDATE(), 1),
	(N'Adidas Stan Smith', 2, 2, 4, N'Giày thời trang đơn giản, phong cách tennis cổ điển', N'admin01', GETDATE(), 1),
	(N'Adidas NMD R1', 2, 5, 5, N'Giày streetwear năng động, đệm Boost hiện đại', N'admin01', GETDATE(), 1),
	(N'Adidas Samba OG', 2, 1, 2, N'Giày bóng đá trong nhà, thiết kế cổ điển', N'admin01', GETDATE(), 1),
	(N'Adidas Adizero Adios', 2, 3, 3, N'Giày chạy nhẹ, tốc độ dành cho thi đấu chuyên nghiệp', N'admin01', GETDATE(), 1),

	-- Puma
	(N'Puma Suede Classic', 3, 2, 4, N'Giày da lộn phong cách đường phố, biểu tượng của Puma', N'admin01', GETDATE(), 1),
	(N'Puma RS-X', 3, 5, 1, N'Mẫu giày có thiết kế hiện đại, đế chunky cá tính', N'admin01', GETDATE(), 1),
	(N'Puma Future Rider', 3, 5, 3, N'Giày retro với thiết kế trẻ trung, nhẹ nhàng', N'admin01', GETDATE(), 1),
	(N'Puma Clyde', 3, 4, 2, N'Giày bóng rổ cổ điển với phong cách thời trang', N'admin01', GETDATE(), 1),
	(N'Puma Cali', 3, 2, 5, N'Giày nữ phong cách California, đế cao trẻ trung', N'admin01', GETDATE(), 1),
	(N'Puma Velocity Nitro', 3, 3, 3, N'Giày chạy hiệu suất cao, đệm Nitro mềm mại', N'admin01', GETDATE(), 1),

	-- New Balance
	(N'New Balance 990v5', 4, 3, 1, N'Mẫu giày chạy bộ cao cấp, thiết kế bền bỉ và thoải mái', N'admin01', GETDATE(), 1),
	(N'New Balance 327', 4, 2, 4, N'Giày retro độc đáo, mang hơi hướng thập niên 70', N'admin01', GETDATE(), 1),
	(N'New Balance 574', 4, 2, 1, N'Mẫu giày biểu tượng, phù hợp cho nhiều mục đích', N'admin01', GETDATE(), 1),
	(N'New Balance Fresh Foam 1080v12', 4, 3, 3, N'Giày chạy bộ với đệm Fresh Foam siêu êm', N'admin01', GETDATE(), 1),
	(N'New Balance 550', 4, 4, 2, N'Giày bóng rổ cổ điển, mang phong cách retro mạnh mẽ', N'admin01', GETDATE(), 1),
	(N'New Balance 993', 4, 3, 5, N'Giày chạy bộ ổn định, phù hợp cả luyện tập và đi chơi', N'admin01', GETDATE(), 1),

	-- Converse
	(N'Converse Chuck Taylor All Star', 5, 4, 2, N'Giày vải cao cổ biểu tượng, phù hợp mọi phong cách', N'admin01', GETDATE(), 1),
	(N'Converse Chuck 70', 5, 4, 4, N'Phiên bản nâng cấp của Chuck cổ điển, chất liệu tốt hơn', N'admin01', GETDATE(), 1),
	(N'Converse One Star', 5, 2, 3, N'Giày da lộn với ngôi sao đặc trưng, phong cách riêng biệt', N'admin01', GETDATE(), 1),
	(N'Converse Run Star Motion', 5, 5, 1, N'Mẫu giày đế cao, thiết kế phá cách và hiện đại', N'admin01', GETDATE(), 1),
	(N'Converse Pro Leather', 5, 4, 4, N'Mẫu giày bóng rổ thập niên 70 với phong cách vintage', N'admin01', GETDATE(), 1),
	(N'Converse Chuck Taylor X CDG', 5, 2, 5, N'Giày collab với thương hiệu Comme des Garçons', N'admin01', GETDATE(), 1);
GO

-- 11. Bảng PRODUCT_DETAIL --

INSERT INTO dbo.PRODUCT_DETAIL
	(COLLAR_ID, SIZE_ID, COLOR_ID, PRODUCT_ID, PRICE, DESCRIPTION, STATUS)
VALUES
	(1, 1, 1, 1, 2500000, N'Chi tiết sản phẩm Nike', 1),
	(1, 1, 2, 1, 2500000, N'Chi tiết sản phẩm Nike', 1),
	(1, 2, 1, 1, 2500000, N'Chi tiết sản phẩm Nike', 1),
	(1, 2, 2, 1, 2500000, N'Chi tiết sản phẩm Nike', 1),

	(1, 1, 1, 7, 2500000, N'Chi tiết sản phẩm Adidas', 1),
	(1, 1, 2, 7, 2500000, N'Chi tiết sản phẩm Adidas', 1),
	(1, 2, 1, 7, 2500000, N'Chi tiết sản phẩm Adidas', 1),
	(1, 2, 2, 7, 2500000, N'Chi tiết sản phẩm Adidas', 1),

	(1, 1, 1, 13, 2500000, N'Chi tiết sản phẩm Puma', 1),
	(1, 1, 2, 13, 2500000, N'Chi tiết sản phẩm Puma', 1),
	(1, 2, 1, 13, 2500000, N'Chi tiết sản phẩm Puma', 1),
	(1, 2, 2, 13, 2500000, N'Chi tiết sản phẩm Puma', 1),

	(1, 1, 1, 19, 2500000, N'Chi tiết sản phẩm New Balance', 1),
	(1, 1, 2, 19, 2500000, N'Chi tiết sản phẩm New Balance', 1),
	(1, 2, 1, 19, 2500000, N'Chi tiết sản phẩm New Balance', 1),
	(1, 2, 2, 19, 2500000, N'Chi tiết sản phẩm New Balance', 1),

	(1, 1, 1, 25, 2500000, N'Chi tiết sản phẩm Converse', 1),
	(1, 1, 2, 25, 2500000, N'Chi tiết sản phẩm Converse', 1),
	(1, 2, 1, 25, 2500000, N'Chi tiết sản phẩm Converse', 1),
	(1, 2, 2, 25, 2500000, N'Chi tiết sản phẩm Converse', 1);
GO

-- 12. Bảng IMAGE --

INSERT INTO dbo.IMAGE
	(PRODUCT_DETAIL_ID, URL, IS_MAIN)
VALUES
	(1, './images/anh1.webp', 1),
	(1, './images/anh2.webp', 0),
	(1, './images/anh3.webp', 0),
	(1, './images/anh4.webp', 0),
	(1, './images/anh5.webp', 0),
	(1, './images/anh6.webp', 0),
	(2, './images/anhd1.webp', 1),
	(2, './images/anhd2.webp', 0),
	(2, './images/anhd3.webp', 0),
	(2, './images/anhd4.webp', 0),
	(2, './images/anhd5.webp', 0),
	(2, './images/anhd6.webp', 0),
	(5, './images/anhd6.webp', 1),
	(9, './images/anhd6.webp', 1),
	(13, './images/anhd6.webp', 1),
	(17, './images/anhd6.webp', 1);
GO

-- 13. Bảng CART --

INSERT INTO dbo.CART
	(CUSTOMER_ID)
VALUES
	(1);
GO

-- 14. Bảng CART_DETAIL --

INSERT INTO dbo.CART_DETAIL
	(CART_ID, PRODUCT_DETAIL_ID, QUANTITY)
VALUES
	(1, 1, 2);
GO

-- 15. Bảng ADDRESS (5 địa chỉ) --

INSERT INTO dbo.ADDRESS
	(FULL_ADDRESS, NUMBER_PHONE, FULL_NAME, CUSTOMER_ID, IS_DEFAULT, DETAIL_ADDRESS, WARD_NAME, DISTRICT_NAME, CITY_NAME)
VALUES
	(N'123, Đường 365, P.1,Lê Chân, TP.Hải Phòng', N'0911123456', N'Bé 1', 1, 1, N'123', N'Phường 1', N'Lê Chân', N'TP Hải Phòng');
GO

-- 16. Bảng BILL và BILL_DETAIL (5 hóa đơn + 5 chi tiết) -- 

INSERT INTO dbo.BILL
	(CUSTOMER_ID, EMPLOYEE_ID, PTTT_ID, PROMOTION_ID, CODE, BILL_TYPE, STATUS, CREATED_BY, CREATED_DATE, SHIPPING_DATE, DATE_OF_PAYMENT, RECIPIENT_NAME, RECIPIENT_PHONE_NUMBER, RECEIVER_ADDRESS, NOTE, SUB_TOTAL, DISCOUNT_AMOUNT, SHIPPING_FEE, GRAND_TOTAL)
VALUES
	(1, 1, 1, NULL, N'INV001', N'Online', 2, N'admin01', GETDATE(), GETDATE(), GETDATE(), N'Khách 1',
		N'0911123456', N'123 Đường A', N'Standard', 2500000.00, 0, 50000.00, 2550000.00);
GO

INSERT INTO dbo.BILL_DETAIL
	(BILL_ID, PRODUCT_DETAIL_ID, QUANTITY, PRICE, STATUS, PRODUCT_IMAGE, COLOR, SIZE, PRODUCT_NAME)
VALUES
	(2, 1, 1, 1000000, 1, './images/nike-air-max-90-white.webp', N'EU 33',N'White', N'Sneaker Model 1');
GO

-- 17. Bảng PROMOTION & PROMOTION_DETAIL --

INSERT INTO dbo.PROMOTION
	(PROMOTION_CODE, NAME, TYPE, VALUE, START_DATE, END_DATE, STATUS, NOTE, CREATED_DATE, MODIFIED_DATE)
VALUES
	(N'SALE10', N'Giảm 10%', 1, 10.00, GETDATE(), DATEADD(day,30,GETDATE()), 1, N'Ưu đãi mùa hè', GETDATE(), GETDATE());
GO

-- 18. Bảng INVENTORY (30 bản ghi) --

INSERT INTO dbo.INVENTORY
	(PRODUCT_DETAIL_ID, QUANTITY, MODIFIED_DATE)
VALUES
	(1, 10, GETDATE()),
	(2, 10, GETDATE()),
	(3, 10, GETDATE()),
	(4, 10, GETDATE()),
	(5, 10, GETDATE()),
	(6, 10, GETDATE()),
	(7, 10, GETDATE()),
	(8, 10, GETDATE()),
	(9, 10, GETDATE()),
	(10, 10, GETDATE());
GO

-- 19. Bảng IMPORT_RECEIPT & DETAIL (5 phiếu) --

INSERT INTO dbo.IMPORT_RECEIPT
	(IMPORT_RECEIPT_CODE, EMPLOYEE_ID, IMPORT_DATE, TOTAL_AMOUNT, NOTE, STATUS)
VALUES
	(N'PN20250701', 1, GETDATE(), 1000000, N'Nhập hàng Nike 1', 1);
GO

INSERT INTO dbo.IMPORT_RECEIPT_DETAIL
	(IMPORT_RECEIPT_ID, PRODUCT_DETAIL_ID, QUANTITY, UNIT_PRICE, TOTAL_PRICE, STATUS)
VALUES
	(1, 1, 5, 2000000.00, 10000000.00, 1);
GO

-- 20. Bảng FAVORITE --
INSERT INTO [dbo].[FAVORITE]
	([CUSTOMER_ID], [PRODUCT_ID])
VALUES
	(1, 1);
GO
-- SELECT 
--     P.ID AS id,
--     P.PRODUCT_NAME,
--     B.NAME AS BRAND_NAME,
--     PD.PRICE,
--     I.URL AS MAIN_IMAGE_URL
-- FROM PRODUCT P
-- JOIN BRAND B ON P.BRAND_ID = B.ID
-- JOIN PRODUCT_DETAIL PD ON PD.PRODUCT_ID = P.ID
-- JOIN IMAGE I ON I.PRODUCT_DETAIL_ID = PD.ID AND I.IS_MAIN = 1
-- WHERE P.STATUS = 1

-- SELECT 
--     P.ID AS productId,
--     P.PRODUCT_NAME AS productName,
--     B.NAME AS brandName,
--     PD.PRICE AS price,
--     I.URL AS imageUrl,
--     I.IS_MAIN AS isMain
-- FROM PRODUCT P
-- JOIN BRAND B ON P.BRAND_ID = B.ID
-- JOIN PRODUCT_DETAIL PD ON PD.PRODUCT_ID = P.ID
-- JOIN IMAGE I ON I.PRODUCT_DETAIL_ID = PD.ID
-- WHERE P.STATUS = 1

-- SELECT 
--     P.ID AS productId,
--     P.PRODUCT_NAME AS productName,
--     B.NAME AS brandName,
--     PD.PRICE AS price,
--     STRING_AGG(I.URL + '|' + CAST(I.IS_MAIN AS VARCHAR), ',') AS images
-- FROM PRODUCT P
-- JOIN BRAND B ON P.BRAND_ID = B.ID
-- JOIN PRODUCT_DETAIL PD ON PD.PRODUCT_ID = P.ID
-- JOIN IMAGE I ON I.PRODUCT_DETAIL_ID = PD.ID
-- WHERE P.STATUS = 1
-- GROUP BY P.ID, P.PRODUCT_NAME, B.NAME, PD.PRICE


-- SELECT 
--     P.ID AS productId,
--     P.PRODUCT_NAME AS productName,
--     B.NAME AS brandName,
--     PD.PRICE AS price,
--     (
--         SELECT I2.URL 
--         FROM IMAGE I2 
--         WHERE I2.PRODUCT_DETAIL_ID = PD.ID 
--         ORDER BY I2.ID 
--         OFFSET 1 ROW FETCH NEXT 1 ROW ONLY
--     ) AS hoverImage
-- FROM PRODUCT P
-- JOIN BRAND B ON P.BRAND_ID = B.ID
-- JOIN PRODUCT_DETAIL PD ON PD.PRODUCT_ID = P.ID
-- WHERE P.STATUS = 1
-- GROUP BY P.ID, P.PRODUCT_NAME, B.NAME, PD.PRICE


-- SELECT 
--     P.ID AS productId,
--     P.PRODUCT_NAME AS productName,
--     B.NAME AS brandName,
--     PD.PRICE AS price,
--     MAX(CASE WHEN RN = 1 THEN I.URL END) AS image1,
--     MAX(CASE WHEN RN = 2 THEN I.URL END) AS image2
-- FROM PRODUCT P
-- JOIN BRAND B ON P.BRAND_ID = B.ID


-- CROSS APPLY (
--     SELECT TOP 1 * 
--     FROM PRODUCT_DETAIL PD 
--     WHERE PD.PRODUCT_ID = P.ID
--     ORDER BY PD.ID
-- ) PD


-- JOIN (
--     SELECT 
--         ID, PRODUCT_DETAIL_ID, URL,
--         ROW_NUMBER() OVER (PARTITION BY PRODUCT_DETAIL_ID ORDER BY ID) AS RN
--     FROM IMAGE
-- ) I ON I.PRODUCT_DETAIL_ID = PD.ID AND I.RN IN (1, 2)

-- WHERE P.STATUS = 1
-- GROUP BY P.ID, P.PRODUCT_NAME, B.NAME, PD.PRICE


-- WITH
-- 	RepresentativeProductDetail
-- 	AS
-- 	(
-- 		SELECT
-- 			PRODUCT_ID,
-- 			COLOR_ID,
-- 			MIN(ID) AS REPRESENTATIVE_PD_ID
-- 		FROM PRODUCT_DETAIL
-- 		GROUP BY PRODUCT_ID, COLOR_ID
-- 	)

-- SELECT
-- 	P.ID AS productId,
-- 	PD.ID AS productDetailId,
-- 	P.PRODUCT_NAME AS productName,
-- 	B.NAME AS brandName,
-- 	C.NAME AS color,
-- 	CL.NAME AS collar,
-- 	P.DESCRIPTION AS descriptionProduct,
-- 	S.EU AS size,
-- 	PD.PRICE AS price,
-- 	STRING_AGG(I.URL, ',') AS images
-- FROM
-- 	PRODUCT P
-- 	JOIN PRODUCT_DETAIL PD ON P.ID = PD.PRODUCT_ID
-- 	JOIN BRAND B ON P.BRAND_ID = B.ID
-- 	JOIN COLOR C ON PD.COLOR_ID = C.ID
-- 	JOIN SIZE S ON PD.SIZE_ID = S.ID
-- 	LEFT JOIN COLLAR CL ON PD.COLLAR_ID = CL.ID
-- 	LEFT JOIN RepresentativeProductDetail RPD
-- 	ON PD.PRODUCT_ID = RPD.PRODUCT_ID AND PD.COLOR_ID = RPD.COLOR_ID
-- 	LEFT JOIN IMAGE I ON I.PRODUCT_DETAIL_ID = RPD.REPRESENTATIVE_PD_ID
-- WHERE P.ID = 1
-- GROUP BY
--                 P.ID, PD.ID, P.PRODUCT_NAME,
--                 B.NAME, C.NAME, P.DESCRIPTION, S.EU, CL.NAME, PD.PRICE;




-- WITH
-- 	RepresentativeProductDetail
-- 	AS
-- 	(
-- 		SELECT
-- 			PRODUCT_ID,
-- 			COLOR_ID,
-- 			MIN(ID) AS REPRESENTATIVE_PD_ID
-- 		FROM PRODUCT_DETAIL
-- 		GROUP BY PRODUCT_ID, COLOR_ID
-- 	)

-- SELECT
-- 	CD.ID                  AS cartDetailId,
-- 	C.ID                   AS cartId,
-- 	CU.ID                  AS customerId,
-- 	P.ID                   AS productId,
-- 	P.PRODUCT_NAME         AS productName,
-- 	PD.ID                  AS productDetailId,
-- 	S.EU                 AS size,
-- 	CO.NAME                AS color,
-- 	PD.PRICE               AS price,
-- 	CD.QUANTITY            AS quantity,
-- 	I.URL                  AS image
-- FROM CART_DETAIL CD
-- 	JOIN CART C ON CD.CART_ID = C.ID
-- 	JOIN CUSTOMER CU ON C.CUSTOMER_ID = CU.ID
-- 	JOIN PRODUCT_DETAIL PD ON CD.PRODUCT_DETAIL_ID = PD.ID
-- 	JOIN PRODUCT P ON PD.PRODUCT_ID = P.ID
-- 	JOIN SIZE S ON PD.SIZE_ID = S.ID
-- 	JOIN COLOR CO ON PD.COLOR_ID = CO.ID

-- 	-- Lấy product detail đại diện theo màu
-- 	LEFT JOIN RepresentativeProductDetail RPD
-- 	ON PD.PRODUCT_ID = RPD.PRODUCT_ID AND PD.COLOR_ID = RPD.COLOR_ID

-- 	-- Lấy ảnh chính (is_main = 1) từ bản ghi đại diện
-- 	LEFT JOIN IMAGE I
-- 	ON I.PRODUCT_DETAIL_ID = RPD.REPRESENTATIVE_PD_ID AND I.IS_MAIN = 1
-- WHERE CU.ID = 1


-- SELECT CASE WHEN COUNT(cd) > 0 THEN true ELSE false END FROM CART_DETAIL cd WHERE cd.cart.id = 1 AND cd.productDetail.id = 1

-- SELECT 
--     CASE 
--         WHEN COUNT(*) > 0 THEN CAST(1 AS BIT) 
--         ELSE CAST(0 AS BIT) 
--     END AS ExistsFlag
-- FROM CART_DETAIL
-- WHERE CART_ID = 1 AND PRODUCT_DETAIL_ID = 5;






-- SELECT
-- 	P.ID AS productId,
-- 	P.PRODUCT_NAME AS productName,
-- 	B.NAME AS brandName,
-- 	PD.PRICE AS price,
-- 	MAX(CASE WHEN RN = 1 THEN I.URL END) AS image1,
-- 	MAX(CASE WHEN RN = 2 THEN I.URL END) AS image2
-- FROM (
--         SELECT TOP 4
-- 		PD.PRODUCT_ID
-- 	FROM BILL_DETAIL BD
-- 		JOIN PRODUCT_DETAIL PD ON BD.PRODUCT_DETAIL_ID = PD.ID
-- 	GROUP BY PD.PRODUCT_ID
-- 	ORDER BY SUM(BD.QUANTITY) DESC
--     ) TOP_PRODUCT

-- 	JOIN PRODUCT P ON P.ID = TOP_PRODUCT.PRODUCT_ID
-- 	JOIN BRAND B ON P.BRAND_ID = B.ID

--     CROSS APPLY (
--         SELECT TOP 1
-- 		*
-- 	FROM PRODUCT_DETAIL PD
-- 	WHERE PD.PRODUCT_ID = P.ID
-- 	ORDER BY PD.ID
--     ) PD

-- 	JOIN (
--         SELECT
-- 		ID, PRODUCT_DETAIL_ID, URL,
-- 		ROW_NUMBER() OVER (PARTITION BY PRODUCT_DETAIL_ID ORDER BY ID) AS RN
-- 	FROM IMAGE
--     ) I ON I.PRODUCT_DETAIL_ID = PD.ID AND I.RN IN (1, 2)

-- WHERE P.STATUS = 1
-- GROUP BY P.ID, P.PRODUCT_NAME, B.NAME, PD.PRICE


-- SELECT
-- 	A.ID AS addressId,
-- 	C.ID AS customerId,
-- 	C.FULL_NAME AS CustomerName,
-- 	A.NUMBER_PHONE AS numberPhone,
-- 	A.FULL_ADDRESS AS fullAddress,
-- 	A.IS_DEFAULT AS isDefault
-- FROM
-- 	ADDRESS A
-- 	JOIN
-- 	CUSTOMER C ON A.CUSTOMER_ID = C.ID
-- WHERE 
--     C.ID = 1; 




